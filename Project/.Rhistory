}
)
y="RA"
checkGroup <- (
if (y %notin% c("RA", "BB")) {
c(FALSE, FALSE)
} else if (y %notin% "RA" & y %in% "BB") {
c(FALSE, TRUE)
} else if (y %in% "RA" & y %notin% "BB") {
c(TRUE, FALSE)
} else {
c(TRUE, TRUE)
}
)
checkGroup
y="BB"
checkGroup <- (
if (y %notin% c("RA", "BB")) {
c(FALSE, FALSE)
} else if (y %notin% "RA" & y %in% "BB") {
c(FALSE, TRUE)
} else if (y %in% "RA" & y %notin% "BB") {
c(TRUE, FALSE)
} else {
c(TRUE, TRUE)
}
)
checkGroup
y= c("RA", "BB")
checkGroup <- (
if (y %notin% c("RA", "BB")) {
c(FALSE, FALSE)
} else if (y %notin% "RA" & y %in% "BB") {
c(FALSE, TRUE)
} else if (y %in% "RA" & y %notin% "BB") {
c(TRUE, FALSE)
} else {
c(TRUE, TRUE)
}
)
if y %in% c("RA", "BB") {
print(t)
} else {
print(f)
}
if (y %in% c("RA", "BB")) {
print(t)
} else {
print(f)
}
checkGroup <- (
if (y != c("RA", "BB")) {
c(FALSE, FALSE)
} else if (y %notin% "RA" & y %in% "BB") {
c(FALSE, TRUE)
} else if (y %in% "RA" & y %notin% "BB") {
c(TRUE, FALSE)
} else {
c(TRUE, TRUE)
}
)
y
shiny::runApp()
runApp()
runApp()
runApp()
trendy_plot(ts, window = 365)
ts %.>%
ggplot(., aes(sales)) %.>%
geom_histogram(color="turquoise4", fill="lightgreen", alpha=.5, bins=100) %.>%
theme_standard %.>%
vline_outliers %.>%
labs(x="Sales ($)", y="Frequency", title="Daily Sales Distribution")
options(scipen=10000)
ts %.>%
ggplot(., aes(sales)) %.>%
geom_density(color="turquoise4", fill="lightgreen", alpha=.4) %.>%
theme_standard %.>%
vline_outliers %.>%
labs(x="Sales ($)", y="Density", title="Daily Sales Density Function")
ts %.>%
ggplot(., aes(sales)) %.>%
geom_boxplot(color="turquoise4", fill="lightgreen",
alpha=.4, outlier.shape = 1, outlier.color = "red") %.>%
vline_outliers %.>%
theme_standard %.>%
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) %.>%
labs(x="Sales ($)", y="", title="B&W Plot of Daily Sales")
runApp()
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
2+3
# Write function to automatically detect outliers in a time series
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
# Write function to automatically detect outliers in a time series
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
detect_outliers(ts_df, perc = .05)
ff
ff =4
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
detect_outliers(ts_df, perc = .05)
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=FALSE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
detect_outliers(ts_df, perc = .05)
runApp()
ts_outliers <- detect_outliers(ts_df, perc = .05)
ts_outliers <- detect_outliers(ts_df, perc = .05)
# Detect outliers
ts_outliers <- detect_outliers(ts, perc = .05)
ts_outliers <- detect_outliers(ts, perc = .05)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
remove_outliers(ts_df, outliers_idx = outliers_index_pos)
ts_outliers <- detect_outliers(ts_df, perc = .05)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
ts_outliers <- detect_outliers(ts_df, perc = .05)
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
remove_outliers <- function (ts, outliers_idx, return_df = TRUE, plot_ts = TRUE) {
ts_clean <- ts
ts_clean$sales[outliers_idx] <- NA
ts_clean$sales <- na.approx(ts_clean$sales, method='linear') #interpolation
# plot the two series
ts_clean$og_sales <- ts$sales
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_clean) +
geom_line(aes(x=date, y=og_sales, color="red"), size=1) +
geom_line(aes(x=date, y=sales, color="turquoise4"), size=1) +
labs(x="Date", y="Sales",
title=glue("Outliers Removed: Found {n_outliers[2,2]}")) +
scale_color_manual(name = "Sales",
values = c("red", "turquoise4"),
labels = c("Original", "Interpolated"))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_clean)
}
}
# Detect outliers
ts_outliers <- detect_outliers(ts_df, perc = .05)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
ts_clean <- ts
ts_clean$sales[outliers_idx] <- NA
ts_clean$sales[ts_outliers[ts_outliers$outlier == 1, 3]] <- NA
ts_clean$sales <- na.approx(ts_clean$sales, method='linear')
ts_clean
ts
ts_clean$og_sales <- ts$sales
ts_clean
ts_outliers
ts_outliers <- detect_outliers(ts_df, perc = .05)
remove_outliers <- function (ts, outliers_idx, return_df = TRUE, plot_ts = TRUE) {
ts_clean <- ts
ts_clean$sales[outliers_idx] <- NA
ts_clean$sales <- na.approx(ts_clean$sales, method='linear') #interpolation
# plot the two series
ts_clean$og_sales <- ts$sales
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_clean) +
geom_line(aes(x=date, y=og_sales, color="red"), size=1) +
geom_line(aes(x=date, y=sales, color="turquoise4"), size=1) +
labs(x="Date", y="Sales",
title=glue("Outliers Removed: Found {n_outliers[2,2]}")) +
scale_color_manual(name = "Sales",
values = c("red", "turquoise4"),
labels = c("Original", "Interpolated"))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_clean)
}
}
ts_outliers <- detect_outliers(ts_df, perc = .05)
ts_outliers
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
detect_outliers <- function (ts, perc=0.01, gamma=0.01, return_df=TRUE, plot_ts=TRUE) {
# train a one-class SVM model
model <- ksvm(ts$sales, nu=perc, type='one-svc', kernel='rbfdot',
kpar=list((sigma=gamma))) #using radial bias f'n kernel
# time series output
ts_outliers <- data.frame(ts)
ts_outliers$index <- 0 #initializing
for (i in 0:length(as.vector(ts$sales))) {
ts_outliers$index[i] = i
}
ts_outliers$outlier <- predict(model)
for (i in 1:length(as.vector(ts$sales))) {
if (ts_outliers$outlier[i] == TRUE) {
ts_outliers$outlier[i] = 0
}
else {
ts_outliers$outlier[i] = 1
}
}
# plot ts w/ exposed outliers
n_outliers <- ts_outliers %>% count(outlier)
p <- ggplot(ts_outliers) +
geom_line(aes(x = index, y = sales,
color = "turquoise4"), size=1) +
geom_point(aes(x = index, y = sales),
data = . %>% filter(outlier %in% 1), color = 'red', size=3, alpha=0.5) +
labs(x="", y="", title=glue("Outliers Detection: Found {n_outliers[2,2]}")) +
scale_color_manual(name="",
values = c("turquoise4", "red"),
labels = c("Actual Values", "Outliers")) +
theme(legend.justification = c(1,0), legend.position=c(.95,.9))
# conditional function output
if (plot_ts) {
print(p)
}
if (return_df) {
return(ts_outliers)
}
}
ts_outliers <- detect_outliers(ts_df, perc = .05)
ts_outliers
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
remove_outliers
runApp()
runApp()
runApp()
runApp()
View(apply_right.gg)
runApp()
ts_outliers <- detect_outliers(ts_df, perc = .05)
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
runApp()
ts_outliers <- detect_outliers(ts, perc = .05)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts, outliers_idx = outliers_index_pos)
ts_outliers <- detect_outliers(ts, perc = .05)
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
ts_clean <- remove_outliers(ts, outliers_idx = outliers_index_pos)
runApp()
# Detect outliers
ts_outliers <- detect_outliers(ts_df, perc = .15)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
ts_outliers <- detect_outliers(ts_df, perc = .30)
# outliers' index position
outliers_index_pos <- ts_outliers[ts_outliers$outlier == 1, 3] #'3' is the index column we created
# exclude outliers
ts_clean <- remove_outliers(ts_df, outliers_idx = outliers_index_pos)
runApp()
runApp()
runApp()
runApp()
